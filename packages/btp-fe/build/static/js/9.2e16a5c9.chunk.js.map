{"version":3,"sources":["components/Helmet/index.jsx","assets/images/blue-left-arrow.svg","components/Input/Input.jsx","components/Input/TextInput.jsx","components/Input/TokenInput.jsx","components/TransferBox/ControlButtons.jsx","utils/inputValidation.js","components/TransferBox/Details.jsx","components/TransferBox/Approval.jsx","hooks/useListenForSuccessTransaction.js","components/NotificationModal/TransferApproval.jsx","assets/images/vector-icon.svg","components/TransferCard/TransferCard.jsx","components/TransferBox/TransferBox.jsx","containers/Transfer/Transfer.jsx"],"names":["Helmet","memo","title","children","displayName","StyledInput","styled","input","colors","grayText","tertiaryDark","Input","React","forwardRef","props","ref","StyledTextInput","TextMixin","md","grayDark","hasError","errorState","grayLine","primaryBrand","grayAccent","TextInput","meta","error","touched","Text","className","Wrapper","div","HeaderMixin","mdBold","grayBG","StyledTokenInput","TokenInput","isCurrent","value","token","usdRate","onBlur","useState","showInput","setShowInput","tokenInputRef","useRef","useEffect","current","focus","min","type","e","onClick","toSeparatedNumberString","SubTitleMixin","tertiaryBase","leftArrow","StyledButton","PrimaryButton","ControlButtons","onBack","onExecute","executeLabel","composeValidators","validators","reduce","validator","undefined","WalletBalance","media","Addresses","required","fields","icons","wallets","iconex","iconexIcon","metamask","metaMaskIcon","moonbeamIcon","hana","hanaIcon","Details","setStep","setTokenValue","initalInputDisplay","isValidForm","sendingInfo","account","form","network","balance","currentNetwork","wallet","useTokenBalance","currentBalance","max","msg","isNaN","maxValue","name","validate","render","placeholder","Icon","iconURL","color","graySubText","size","resetFieldState","disabled","SendToken","Total","Approval","callback","values","BTPFee","setBTPFee","recipient","tokenAmount","unit","getBTPfee","then","result","restart","handler","document","addEventListener","SUCCESS_TRANSACTION","removeEventListener","openModal","useDispatch","modal","text","icon","hashShortener","toPrecision","isSendingNativeCoin","tx","to","toChecksumAddress","coinName","desc","getService","transfer","TransferApproval","onOk","onCancel","width","height","StyledCard","transferIcon","TransferCard","setSendingInfo","isConnected","checkingApproval","setCheckingApproval","setDisplay","onChange","target","onNext","a","isApprovedForAll","hasHeading","setApprovalForAll","connectedNetWorks","moonbeam","Select","options","label","filter","TransferBox","step","tokenValue","useSelect","selectIsConnected","selectAccountInfo","isCurrentStep","s","useTokenToUsd","onSendingInfoChange","info","memoizedSetStep","useCallback","param","memoizedSetTokenValue","onSubmit","handleSubmit","valid","TransferStyled","Transfer"],"mappings":"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","file":"static/js/9.2e16a5c9.chunk.js","sourcesContent":["import { memo } from 'react';\nimport { Helmet as ReactHelmet } from 'react-helmet-async';\n\nexport const Helmet = memo(({ title, children }) => {\n  return (\n    <ReactHelmet>\n      <title>BTP - {title}</title>\n      {children}\n    </ReactHelmet>\n  );\n});\n\nHelmet.displayName = 'Helmet';\n","export default __webpack_public_path__ + \"static/media/blue-left-arrow.24c46d43.svg\";","import React from 'react';\nimport styled from 'styled-components/macro';\nimport { colors } from '../Styles/Colors';\n\nconst StyledInput = styled.input`\n  width: 100%;\n\n  color: ${colors.grayText};\n  caret-color: ${colors.tertiaryDark};\n  border: 0;\n\n  &:focus {\n    outline: none;\n  }\n\n  /* remove number arrows */\n  /* Chrome, Safari, Edge, Opera */\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n  /* Firefox */\n  &[type='number'] {\n    -moz-appearance: textfield;\n  }\n`;\n\nexport const Input = React.forwardRef((props, ref) => {\n  return <StyledInput {...props} ref={ref} />;\n});\n\nInput.displayName = 'Input';\n","import styled from 'styled-components/macro';\nimport { Input } from './Input';\nimport { colors } from '../Styles/Colors';\nimport { TextMixin, Text } from 'components/Typography/Text';\n\nexport const StyledTextInput = styled(Input)`\n  ${TextMixin.md};\n\n  padding: 20px 16px;\n  background-color: ${colors.grayDark};\n  border-radius: 4px;\n  border: solid 1px ${({ hasError }) => (hasError ? colors.errorState : colors.grayLine)};\n\n  &:focus {\n    border-color: ${colors.primaryBrand};\n    background-color: ${colors.grayAccent};\n  }\n\n  // Removing input background colour for Chrome autocomplete\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:active {\n    -webkit-text-fill-color: ${colors.grayText};\n    -webkit-box-shadow: 0 0 0 50px ${colors.grayDark} inset;\n  }\n\n  &:-webkit-autofill:focus {\n    -webkit-box-shadow: 0 0 0 50px ${colors.grayAccent} inset;\n  }\n`;\n\nexport const TextInput = ({ children, meta = {}, ...props }) => {\n  const hasError = meta.error && meta.touched;\n\n  return (\n    <>\n      <StyledTextInput {...props} hasError={hasError}>\n        {children}\n      </StyledTextInput>\n      {hasError && <Text className=\"xs err-msg\">{meta.error}</Text>}\n    </>\n  );\n};\n","import { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components/macro';\n\nimport { Input } from './Input';\nimport { Text } from 'components/Typography';\nimport { HeaderMixin } from 'components/Typography/Header';\n\nimport { colors } from 'components/Styles/Colors';\nimport { toSeparatedNumberString } from 'utils/app';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0 auto;\n  position: relative;\n\n  .token-label {\n    ${HeaderMixin.mdBold}\n    background-color: ${colors.grayBG};\n    word-break: break-word;\n    margin: 0 32px;\n    padding: 0 10px;\n    display: none;\n    position: absolute;\n    top: 0;\n\n    &.active {\n      display: block;\n    }\n  }\n`;\n\nconst StyledTokenInput = styled(Input)`\n  ${HeaderMixin.mdBold}\n  width: 105px;\n  background-color: transparent;\n  width: 100%;\n  padding: 0 32px;\n  text-align: center;\n`;\n\nexport const TokenInput = ({\n  isCurrent,\n  value,\n  token,\n  usdRate,\n  onBlur = () => {},\n  meta = {},\n  ...props\n}) => {\n  const [showInput, setShowInput] = useState(true);\n  const tokenInputRef = useRef();\n\n  useEffect(() => {\n    if (isCurrent) {\n      tokenInputRef.current.focus();\n      setShowInput(true);\n    }\n  }, [isCurrent, setShowInput]);\n\n  return (\n    <Wrapper>\n      <StyledTokenInput\n        {...props}\n        value={value}\n        min={0}\n        type=\"number\"\n        onBlur={(e) => {\n          onBlur(e);\n          setShowInput(false);\n        }}\n        ref={tokenInputRef}\n      />\n\n      <div\n        className={`token-label ${!showInput && 'active'}`}\n        onClick={() => {\n          setShowInput(true);\n          tokenInputRef.current.focus();\n        }}\n      >\n        {value || 0} {token}\n      </div>\n      <Text className=\"md center\">= ${toSeparatedNumberString(usdRate * value)}</Text>\n      {meta.error && meta.touched && <Text className=\"xs err-msg\">{meta.error}</Text>}\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components/macro';\nimport { PrimaryButton } from 'components/Button';\nimport { colors } from 'components/Styles/Colors';\nimport { SubTitleMixin } from 'components/Typography/SubTitle';\n\nimport leftArrow from 'assets/images/blue-left-arrow.svg';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  padding: 40px 32px 32px;\n\n  .back-button {\n    ${SubTitleMixin.mdBold};\n    background-color: transparent;\n    color: ${colors.tertiaryBase};\n\n    display: flex;\n    align-items: center;\n\n    &:before {\n      content: '';\n      background: no-repeat center/cover url('${leftArrow}');\n      width: 8px;\n      height: 14px;\n      margin-right: 15.5px;\n    }\n  }\n`;\nconst StyledButton = styled(PrimaryButton)`\n  padding: 20px 32px;\n  width: auto;\n  height: auto;\n`;\n\nexport const ControlButtons = ({\n  onBack = () => {},\n  onExecute = () => {},\n  executeLabel = 'Transfer',\n}) => {\n  return (\n    <Wrapper>\n      <button className=\"back-button\" onClick={onBack} type=\"button\">\n        Back\n      </button>\n      <StyledButton onClick={onExecute} type=\"submit\">\n        {executeLabel}\n      </StyledButton>\n    </Wrapper>\n  );\n};\n","export const composeValidators = (...validators) => (value) =>\n  validators.reduce((error, validator) => error || validator(value), undefined);\n\nexport const maxValue = (max, msg) => (value) =>\n  isNaN(value) || +value <= +max ? undefined : msg || `Should be less than ${max}`;\n\nexport const minValue = (min, msg) => (value) =>\n  !isNaN(value) && +value >= +min ? undefined : msg || `Should be greater than ${min}`;\n\nexport const required = (value) => (value ? undefined : 'Required');\n","import { memo } from 'react';\nimport styled from 'styled-components/macro';\nimport { Field } from 'react-final-form';\n\nimport { TokenInput, TextInput } from 'components/Input';\nimport { Icon } from 'components/Icon';\nimport { Header, Text } from 'components/Typography';\nimport { ControlButtons } from './ControlButtons';\n\nimport { useTokenBalance } from 'hooks/useTokenBalance';\nimport { composeValidators, maxValue } from 'utils/inputValidation';\nimport { toSeparatedNumberString } from 'utils/app';\nimport { wallets } from 'utils/constants';\n\nimport { colors } from 'components/Styles/Colors';\nimport { media } from 'components/Styles/Media';\n\nimport metaMaskIcon from 'assets/images/metal-mask.svg';\nimport iconexIcon from 'assets/images/icon-ex.svg';\nimport moonbeamIcon from 'assets/images/moonbeam.jpeg';\nimport hanaIcon from 'assets/images/hana-wallet.png';\n\nconst Wrapper = styled.div`\n  padding-top: 23px;\n\n  .heading {\n    text-align: center;\n    margin-bottom: 28px;\n  }\n\n  .content {\n    margin-top: 10px;\n    padding: 0 32px;\n\n    .label {\n      margin: 27px 0 7px;\n    }\n  }\n`;\n\nconst WalletBalance = styled.div`\n  width: 100%;\n  height: 64px;\n\n  border: solid 1px ${colors.grayLine};\n  border-radius: 4px;\n\n  display: flex;\n  justify-content: space-between;\n  padding: 0 16px;\n  margin-bottom: 32px;\n\n  .left {\n    display: flex;\n    align-items: center;\n\n    .wallet-name {\n      margin-left: 13.17px;\n      text-transform: capitalize;\n    }\n  }\n\n  .right {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n    justify-content: center;\n  }\n\n  ${media.md`\n    padding: 16px;\n    flex-direction: column;\n    align-items: center;\n    height: auto;\n\n    .right {\n      margin-top: 16px;\n      align-items: center\n    }\n  `}\n`;\n\nconst Addresses = styled.div`\n  padding: 18px 32px;\n  border-top: solid 1px ${colors.grayLine};\n  border-bottom: solid 1px ${colors.grayLine};\n\n  .send {\n    margin-bottom: 12px;\n  }\n\n  .send,\n  .to {\n    display: flex;\n    justify-content: space-between;\n\n    .sender {\n      display: flex;\n      align-items: center;\n\n      .sender--name {\n        margin-left: 8px;\n      }\n    }\n  }\n`;\n\nconst required = (value) => (value ? undefined : 'Required');\nconst fields = {\n  tokenAmount: 'tokenAmount',\n  recipient: 'recipient',\n};\n\nexport const icons = {\n  [wallets.iconex]: iconexIcon,\n  ICX: iconexIcon,\n  [wallets.metamask]: metaMaskIcon,\n  DEV: moonbeamIcon,\n  [wallets.hana]: hanaIcon,\n};\n\nexport const Details = memo(\n  ({\n    setStep,\n    setTokenValue,\n    initalInputDisplay,\n    isValidForm,\n    isCurrent,\n    sendingInfo,\n    account,\n    usdRate,\n    form,\n  }) => {\n    const { token, network } = sendingInfo;\n    const { balance, currentNetwork, wallet } = account;\n    const [currentBalance] = useTokenBalance(token);\n\n    const max = maxValue(currentBalance, 'Insufficient balance');\n\n    return (\n      <Wrapper>\n        <Header className=\"sm bold heading\">Transfer</Header>\n        <Field\n          name={fields.tokenAmount}\n          validate={composeValidators(required, max)}\n          render={({ input, meta }) => (\n            <TokenInput\n              placeholder={`0 ${token}`}\n              setTokenValue={setTokenValue}\n              initalInputDisplay={initalInputDisplay}\n              isCurrent={isCurrent}\n              token={token}\n              usdRate={usdRate}\n              {...input}\n              meta={meta}\n            />\n          )}\n        />\n\n        <div className=\"content\">\n          <Text className=\"sm label\">Recipient</Text>\n\n          <Field\n            name={fields.recipient}\n            validate={required}\n            render={({ input, meta }) => (\n              <TextInput placeholder={`Enter a ${network} address`} {...input} meta={meta} />\n            )}\n          />\n\n          <Text className=\"sm label\">Wallet balance</Text>\n          <WalletBalance>\n            <div className=\"left\">\n              <Icon iconURL={icons[wallet]} />\n              <Text className=\"md wallet-name\">{wallet}</Text>\n            </div>\n            <div className=\"right\">\n              <Text className=\"md\">\n                {toSeparatedNumberString(currentBalance)} {token}\n              </Text>\n              <Text className=\"xs\" color={colors.graySubText}>\n                = ${toSeparatedNumberString(usdRate * balance)}\n              </Text>\n            </div>\n          </WalletBalance>\n        </div>\n\n        <Addresses>\n          <div className=\"send\">\n            <Text className=\"md\" color={colors.graySubText}>\n              Send\n            </Text>\n            <div className=\"sender\">\n              <Icon iconURL={icons[token]} size=\"s\" />\n              <Text className=\"md sender--name\">\n                {token} ({currentNetwork})\n              </Text>\n            </div>\n          </div>\n          <div className=\"to\">\n            <Text className=\"md\" color={colors.graySubText}>\n              To\n            </Text>\n            <Text className=\"md\">{network}</Text>\n          </div>\n        </Addresses>\n        <ControlButtons\n          onExecute={() => {\n            if (isValidForm) setStep(2);\n          }}\n          onBack={() => {\n            form.resetFieldState(fields.tokenAmount);\n            form.resetFieldState(fields.recipient);\n            setStep(0);\n          }}\n          disabled={currentBalance === null}\n        />\n      </Wrapper>\n    );\n  },\n);\n\nDetails.displayName = 'Details';\n","import { memo, useEffect, useState } from 'react';\nimport styled from 'styled-components/macro';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport { useDispatch } from 'hooks/useRematch';\nimport { useListenForSuccessTransaction } from 'hooks/useListenForSuccessTransaction';\n\nimport { getBTPfee } from 'connectors/ICONex/iconService';\nimport { hashShortener, toSeparatedNumberString } from 'utils/app';\nimport { toChecksumAddress } from 'connectors/MetaMask/utils';\nimport { getService } from 'services/transfer';\n\nimport { Header, Text, SubTitle } from 'components/Typography';\nimport { Icon } from 'components/Icon/Icon';\nimport { ControlButtons } from './ControlButtons';\nimport { icons } from './Details';\n\nimport { colors } from 'components/Styles/Colors';\n\nconst Wrapper = styled.div`\n  padding-top: 23px;\n\n  .heading {\n    text-align: center;\n    margin-bottom: 34px;\n  }\n`;\n\nconst SendToken = styled.div`\n  padding: 0 32px;\n  margin-bottom: 20px;\n\n  .content {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 9px;\n\n    .send-token {\n      max-width: 280px;\n      word-break: break-word;\n    }\n  }\n`;\n\nconst Details = styled.div`\n  padding: 27px 32px 26px;\n  border-top: solid 1px ${colors.grayLine};\n  border-bottom: solid 1px ${colors.grayLine};\n\n  .send,\n  .to,\n  .transfer-fee {\n    display: flex;\n    justify-content: space-between;\n\n    & > .plain-text.md {\n      color: ${colors.graySubText};\n    }\n\n    & > .plain-text.bright {\n      color: ${colors.grayText};\n    }\n  }\n  .send {\n    margin-bottom: 21px;\n    margin-top: 12px;\n\n    .sender {\n      text-align: right;\n\n      .sender--alias {\n        display: inline-block;\n        vertical-align: middle;\n        margin-left: 8px;\n      }\n\n      .sender--name {\n        margin-top: 8px;\n      }\n    }\n  }\n\n  .to {\n    margin-bottom: 21px;\n\n    .receiver {\n      text-align: right;\n\n      .receiver--address {\n        display: inline-block;\n        vertical-align: middle;\n        margin-left: 8.83px;\n        color: ${colors.tertiaryBase};\n      }\n\n      .receiver--name {\n        margin-top: 5px;\n      }\n    }\n  }\n`;\n\nconst Total = styled.div`\n  padding: 26px 32px;\n  border-bottom: solid 1px ${colors.grayLine};\n\n  .total-receive {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 15px;\n  }\n`;\n\nexport const Approval = memo(\n  ({ setStep, values, sendingInfo, account, form, isCurrent, usdRate }) => {\n    const [BTPFee, setBTPFee] = useState(0);\n    const { recipient, tokenAmount = 0 } = values;\n    const { token, network } = sendingInfo;\n    const { currentNetwork, unit } = account;\n\n    /* eslint-disable react-hooks/exhaustive-deps */\n    useEffect(() => {\n      if (isCurrent)\n        getBTPfee().then((result) => {\n          setBTPFee((result / 10000) * tokenAmount);\n        });\n    }, [isCurrent]);\n\n    useListenForSuccessTransaction(() => {\n      setStep(0);\n      form.restart();\n    });\n\n    const { openModal } = useDispatch(({ modal: { openModal } }) => ({\n      openModal,\n    }));\n\n    const onApprove = () => {\n      const isSendingNativeCoin = unit === token;\n      const tx = { to: toChecksumAddress(recipient), value: tokenAmount, coinName: token };\n      openModal({\n        icon: 'loader',\n        desc: 'Waiting for confirmation in your wallet.',\n      });\n\n      getService().transfer(tx, isSendingNativeCoin);\n    };\n\n    return (\n      <Wrapper>\n        <Header className=\"sm bold heading\">Fee & Confirmation</Header>\n        <SendToken>\n          <Text className=\"sm\" color={colors.graySubText}>\n            You will send\n          </Text>\n          <div className=\"content\">\n            <Header className=\"md bold send-token\">\n              {tokenAmount || 0} {token}\n            </Header>\n            <Text className=\"md\">= ${toSeparatedNumberString(usdRate * tokenAmount)}</Text>\n          </div>\n        </SendToken>\n\n        <Details>\n          <SubTitle className=\"lg\">Details</SubTitle>\n          <div className=\"send\">\n            <Text className=\"md\">Send</Text>\n            <div className=\"sender\">\n              <Icon iconURL={icons[token]} size=\"s\" />\n              <Text className=\"md sender--alias\">{token}</Text>\n              <Text className=\"sm sender--name\">{currentNetwork}</Text>\n            </div>\n          </div>\n          <div className=\"to\">\n            <Text className=\"md\">To</Text>\n            <div className=\"receiver\">\n              <CopyToClipboard text={recipient}>\n                <div>\n                  <Icon icon=\"copy\" size=\"s\" color=\"#878491\" />\n                  <Text className=\"md receiver--address\">{hashShortener(recipient || '')}</Text>\n                </div>\n              </CopyToClipboard>\n              <Text className=\"sm receiver--name\">{network}</Text>\n            </div>\n          </div>\n          <div className=\"transfer-fee\">\n            <Text className=\"md\">BTP transfer fee</Text>\n            <Text className=\"md bright\">{BTPFee}</Text>\n          </div>\n        </Details>\n\n        <Total>\n          <div className=\"total-receive\">\n            <SubTitle className=\"lg bold\">Total receive</SubTitle>\n            <SubTitle className=\"lg bold\">\n              {(tokenAmount - BTPFee).toPrecision(4)} {token}\n            </SubTitle>\n          </div>\n          <Text className=\"xs\" color={colors.graySubText}>\n            Please be known that this is NOT the final Total Receive. There will be an amount of\n            network fee deducted from the above Total receive.\n          </Text>\n        </Total>\n\n        <ControlButtons executeLabel=\"Approve\" onBack={() => setStep(1)} onExecute={onApprove} />\n      </Wrapper>\n    );\n  },\n);\n\nApproval.displayName = 'Approval';\n","import { useEffect } from 'react';\nimport { SUCCESS_TRANSACTION } from 'utils/constants';\n\nexport function useListenForSuccessTransaction(callback) {\n  useEffect(() => {\n    const handler = () => {\n      if (callback) callback();\n    };\n    document.addEventListener(SUCCESS_TRANSACTION, handler, false);\n\n    return () => {\n      document.removeEventListener(SUCCESS_TRANSACTION, handler, false);\n    };\n  }, [callback]);\n}\n","import styled from 'styled-components/macro';\nimport { Text } from 'components/Typography';\nimport { PrimaryButton, SecondaryButton } from 'components/Button';\nimport { media } from 'components/Styles/Media';\n\nconst Wrapper = styled.div`\n  padding-top: 3px;\n\n  > .button-control {\n    margin-top: 42px;\n\n    .cancel-btn {\n      margin-right: 32px;\n    }\n\n    ${media.md`\n      display: flex;\n      align-items: center;\n      flex-direction: column-reverse;\n\n      .cancel-btn {\n        margin: 20px 0 0;\n      }\n    `}\n  }\n`;\n\nexport const TransferApproval = ({ onOk, onCancel }) => {\n  return (\n    <Wrapper>\n      <Text className=\"md\">\n        In case you granted your permission, please wait until it has been confirmed. Or, you need\n        to grant permission before sending none-native coins once and only first. Proceed?\n      </Text>\n      <div className=\"button-control\">\n        <SecondaryButton width={192} height={64} className=\"cancel-btn\" onClick={onCancel}>\n          Cancel\n        </SecondaryButton>\n        <PrimaryButton width={192} height={64} onClick={onOk}>\n          OK\n        </PrimaryButton>\n      </div>\n    </Wrapper>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/vector-icon.f628b5b1.svg\";","import { useState } from 'react';\nimport styled from 'styled-components/macro';\n\nimport { Select, SelectAsset } from 'components/Select';\nimport { PrimaryButton } from 'components/Button';\nimport { Header, Text } from 'components/Typography';\nimport { media } from 'components/Styles/Media';\nimport { TransferApproval } from 'components/NotificationModal/TransferApproval';\n\nimport { useDispatch } from 'hooks/useRematch';\nimport { connectedNetWorks } from 'utils/constants';\n\nimport { getService } from 'services/transfer';\nimport transferIcon from 'assets/images/vector-icon.svg';\n\nconst StyledCard = styled.div`\n  width: 480px;\n  background-color: #1d1b22;\n  padding: 32px;\n\n  .desc-txt {\n    text-align: center;\n    color: #878491;\n    margin: 11px 0 37px;\n  }\n\n  .right-side {\n    display: flex;\n    justify-content: flex-end;\n  }\n\n  .devider {\n    margin: 45px 0;\n    border-top: 1px solid #353242;\n    position: relative;\n\n    :after {\n      content: '';\n      background: transparent center / contain no-repeat url(${transferIcon});\n      width: 40px;\n      height: 40px;\n      display: block;\n\n      position: absolute;\n      left: 50%;\n      transform: translate(-50%, -50%);\n    }\n  }\n\n  .button-section {\n    margin-top: 42px;\n  }\n\n  .to,\n  .send {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  ${media.md`\n    width: 100% !important;\n  `}\n`;\n\nexport const TransferCard = ({\n  setStep,\n  setSendingInfo,\n  isConnected,\n  isSendingNativeCoin,\n  currentNetwork,\n}) => {\n  const [checkingApproval, setCheckingApproval] = useState(false);\n\n  const { openModal, setDisplay } = useDispatch(({ modal: { openModal, setDisplay } }) => ({\n    openModal,\n    setDisplay,\n  }));\n\n  const onChange = (values) => {\n    const {\n      target: { value, name },\n    } = values;\n    if (name) {\n      setSendingInfo({ [name]: value });\n    }\n  };\n\n  const onNext = async () => {\n    if (isSendingNativeCoin) {\n      setStep(1);\n    } else {\n      setCheckingApproval(true);\n\n      const result = await getService().isApprovedForAll();\n\n      if (result) {\n        setStep(1);\n      } else if (result === false) {\n        openModal({\n          hasHeading: false,\n          children: (\n            <TransferApproval\n              onOk={() => {\n                getService().setApprovalForAll();\n              }}\n              onCancel={() => {\n                setDisplay(false);\n              }}\n            />\n          ),\n        });\n      } else {\n        openModal({\n          icon: 'xIcon',\n          desc: 'Something went wrong',\n        });\n      }\n\n      setCheckingApproval(false);\n    }\n  };\n\n  const { icon, moonbeam } = connectedNetWorks;\n\n  const getCrossNetworks = () => {\n    return currentNetwork\n      ? [\n          { value: icon, label: icon },\n          { value: moonbeam, label: moonbeam },\n        ].filter((network) => network.value !== currentNetwork)\n      : [];\n  };\n\n  return (\n    <StyledCard>\n      <Header className=\"sm bold center\">Transfer</Header>\n      <div className=\"content\">\n        <Text className=\"sm desc-txt\">\n          Select an asset and destination chain, to begin or resume a mint.\n        </Text>\n\n        <div className=\"send\">\n          <Text className=\"md\">Send</Text>\n          <SelectAsset onChange={onChange} />\n        </div>\n\n        <div className=\"devider\" />\n\n        <div className=\"to\">\n          <Text className=\"md\">To</Text>\n          <Select options={getCrossNetworks()} onChange={onChange} name=\"network\" />\n        </div>\n\n        <div className=\"button-section\">\n          {isConnected ? (\n            <PrimaryButton\n              width={416}\n              height={64}\n              disabled={checkingApproval}\n              onClick={() => {\n                onNext();\n              }}\n              type=\"button\"\n            >\n              Next\n            </PrimaryButton>\n          ) : (\n            <PrimaryButton width={416} height={64} disabled>\n              Connect wallet\n            </PrimaryButton>\n          )}\n        </div>\n      </div>\n    </StyledCard>\n  );\n};\n","import { useState, useCallback } from 'react';\nimport styled from 'styled-components/macro';\nimport { Form } from 'react-final-form';\n\nimport { Details } from './Details';\nimport { Approval } from './Approval';\nimport { TransferCard } from 'components/TransferCard';\n\nimport { colors } from 'components/Styles/Colors';\nimport { media } from 'components/Styles/Media';\n\nimport { useTokenToUsd } from 'hooks/useTokenToUsd';\nimport { useSelect } from 'hooks/useRematch';\n\nconst Wrapper = styled.div`\n  width: 480px;\n  background-color: ${colors.grayBG};\n  text-align: initial;\n  overflow: hidden;\n  border-radius: 4px;\n\n  .container {\n    display: none;\n\n    &.active {\n      display: block;\n    }\n  }\n\n  ${media.md`\n    width: 100%;\n  `}\n`;\n\nexport const TransferBox = () => {\n  const [step, setStep] = useState(0);\n  const [tokenValue, setTokenValue] = useState('');\n  const [sendingInfo, setSendingInfo] = useState({ token: '', network: '' });\n\n  const { isConnected, account } = useSelect(\n    ({ account: { selectIsConnected, selectAccountInfo } }) => ({\n      isConnected: selectIsConnected,\n      account: selectAccountInfo,\n    }),\n  );\n\n  const isCurrentStep = (s) => s === step;\n\n  const { unit, currentNetwork } = account;\n  const usdRate = useTokenToUsd(unit, 1, isCurrentStep(1));\n\n  const onSendingInfoChange = (info = {}) => {\n    setSendingInfo((sendingInfo) => ({ ...sendingInfo, ...info }));\n  };\n\n  const memoizedSetStep = useCallback((param) => setStep(param), [setStep]);\n  const memoizedSetTokenValue = useCallback((param) => setTokenValue(param), [setTokenValue]);\n  const onSubmit = () => {};\n\n  return (\n    <Wrapper>\n      <Form\n        onSubmit={onSubmit}\n        render={({ handleSubmit, values, valid, form }) => {\n          return (\n            <form onSubmit={handleSubmit}>\n              <div className={`container ${isCurrentStep(0) && 'active'}`}>\n                <TransferCard\n                  setStep={memoizedSetStep}\n                  setSendingInfo={onSendingInfoChange}\n                  isConnected={isConnected}\n                  isSendingNativeCoin={unit === sendingInfo.token}\n                  currentNetwork={currentNetwork}\n                />\n              </div>\n              <div className={`container ${isCurrentStep(1) && 'active'}`}>\n                <Details\n                  isCurrent={isCurrentStep(1)}\n                  setStep={memoizedSetStep}\n                  tokenValue={tokenValue}\n                  usdRate={usdRate}\n                  setTokenValue={memoizedSetTokenValue}\n                  isValidForm={valid}\n                  sendingInfo={sendingInfo}\n                  account={account}\n                  form={form}\n                />\n              </div>\n              <div className={`container ${isCurrentStep(2) && 'active'}`}>\n                <Approval\n                  isCurrent={isCurrentStep(2)}\n                  setStep={memoizedSetStep}\n                  values={values}\n                  sendingInfo={sendingInfo}\n                  account={account}\n                  form={form}\n                  usdRate={usdRate}\n                />\n              </div>\n            </form>\n          );\n        }}\n      />\n    </Wrapper>\n  );\n};\n","import styled from 'styled-components/macro';\nimport { NavLink } from 'react-router-dom';\n\nimport { Helmet } from 'components/Helmet';\nimport { TransferBox } from 'components/TransferBox';\nimport { SubTitle } from 'components/Typography';\nimport { colors } from 'components/Styles/Colors';\n\nconst TransferStyled = styled.div`\n  padding-top: 43px;\n  max-width: 480px;\n  margin: 0 auto;\n  text-align: right;\n\n  .transfer-card {\n    display: flex;\n    justify-content: center;\n    padding-bottom: 43px;\n  }\n\n  a > .subtitle-text {\n    display: inline-block;\n    margin: 0 auto 19px;\n  }\n`;\n\nconst Transfer = () => {\n  return (\n    <TransferStyled>\n      <Helmet title=\"Transfer\" />\n\n      <NavLink to={`/transfer/history`}>\n        <SubTitle className=\"sm bold\" color={colors.tertiaryBase}>\n          Transfer history\n        </SubTitle>\n      </NavLink>\n\n      <div className=\"transfer-card\">\n        <TransferBox />\n      </div>\n    </TransferStyled>\n  );\n};\n\nexport default Transfer;\n"],"sourceRoot":""}